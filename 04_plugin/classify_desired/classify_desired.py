# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ClassifyDesired
                                 A QGIS plugin
 Classify the desired area.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-03-14
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Sivabhorn Kongjan
        email                : sivabhornk60@nu.ac.th
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QDoubleSpinBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .classify_desired_dialog import ClassifyDesiredDialog
import os.path
from qgis.core import *
from qgis.utils import Qgis
from PyQt5 import QtWidgets
from PyQt5 import QtCore

import numpy as np
from sklearn import cluster
from osgeo import gdal, gdal_array

import os
import json
import processing

from collections import Counter

from classify_desired.vallaris_api import create_items


class ClassifyDesired:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ClassifyDesired_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Classify Desired')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ClassifyDesired', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/classify_desired/img/phylogenetics.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Classify the desired area.'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Classify Desired'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ClassifyDesiredDialog()

            # show the dialog
            self.dlg.show()
            self.dlg.OK.clicked.connect(self.push_ok)
            self.dlg.Cancel.clicked.connect(self.push_cancel)
            # self.dlg.refresh.clicked.connect(self.inputRas)
            # self.inputRas()
            # self.dlg.saveFile.clicked.connect(self.saveFileDialog)
            self.dlg.saveFile.clicked.connect(self.saveFolder)
            self.dlg.cluster.valueChanged.connect(self.spinB)
            # self.dlg.percentC.valueChanged.connect(self.percentage)
            # self.training()
            self.dlg.OK.clicked.connect(self.processKM)
            QgsProject.instance().setCrs(QgsCoordinateReferenceSystem(4326))
            self.dlg.addRaster.setFilters(QgsMapLayerProxyModel.RasterLayer)
            self.dlg.train.setFilters(QgsMapLayerProxyModel.PointLayer)
            self.dlg.dif.setFilters(QgsMapLayerProxyModel.PolygonLayer)
            now = QtCore.QDate.currentDate()
            #set current date and time to the object
            self.dlg.date.setDate(now)
            self.dlg.progressBar.hide()

        else:
            self.dlg.close()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def push_ok(self):
        print('Finish...')

    def push_cancel(self):
        self.dlg.close()
    
    def inputRas(self):
        self.dlg.addRaster.clear()
        layers = [layer.name() for layer in QgsProject.instance().mapLayers().values()]
        self.dlg.addRaster.addItems(layers)
    
    # def saveFileDialog(self):
    #     path = r"C:\Users\User\Documents" 
    #     filter = "GeoTIFF(*.tif)"
    #     # filter = "GeoJson(*.geojson)"
    #     DirectoryName = QFileDialog.getSaveFileName(None,'Save file',path,filter)
    #     if DirectoryName:
    #         self.dlg.showNameFile.setText(DirectoryName[0])

    def saveFolder(self):
        path = r"C:\\" 
        directory = QFileDialog.getExistingDirectory(None, "Choose a directory",path)
        if directory:
            self.dlg.showNameFile.setText(directory)
            self.directory = directory

    
    def spinB(self):
        print('n_cluster')
    
    # def percentage(self):
    #     print('percent')
    
    # def training(self):
    #     self.dlg.Train.clear()
    #     LayerTrain = [layerT.name() for layerT in QgsProject.instance().mapLayers().values()]
    #     self.dlg.Train.addItems(LayerTrain)
    
    def processKM(self):
        self.dlg.progressBar.show()
        self.dlg.progressBar.setValue(5)
        QgsProject.instance().setCrs(QgsCoordinateReferenceSystem(4326))
        gdal.UseExceptions()
        gdal.AllRegister()

        # File Path
        indata = self.dlg.addRaster.currentLayer() 
        print(indata.source())
        print(indata)
        # Read in raster image 
        img_ds = gdal.Open(indata.source(), gdal.GA_ReadOnly)
        band = img_ds.GetRasterBand(1)
        img = band.ReadAsArray()
        print (img.shape)
        X = img.reshape((-1,1))
        print (X.shape)
        k_means = cluster.KMeans(int(self.dlg.cluster.value()))
        print(k_means)
        k_means.fit(X)
        X_cluster = k_means.labels_
        X_cluster = X_cluster.reshape(img.shape)
        print(X_cluster)
        

        # Save File
        self.dlg.progressBar.setValue(10)
        outdata = self.dlg.showNameFile.text()+"/Cluster.tif"
        ds = gdal.Open(indata.source())
        band = ds.GetRasterBand(1)
        arr = band.ReadAsArray()
        [cols, rows] = img.shape
        aa = img.shape

        format = "GTiff"
        driver = gdal.GetDriverByName(format)


        outDataRaster = driver.Create(outdata, rows, cols, 1, gdal.GDT_Byte)
        outDataRaster.SetGeoTransform(ds.GetGeoTransform())##sets same geotransform as input
        outDataRaster.SetProjection(ds.GetProjection())##sets same projection as input


        outDataRaster.GetRasterBand(1).WriteArray(X_cluster)

        outDataRaster.FlushCache() ## remove from memory
        del outDataRaster ## delete the data (not the actual geotiff)

        # ly_name = str(self.dlg.showNameFile.text()).split("/")[-1].split(".")[0]
        # print(ly_name)
        # if self.dlg.addLayer.isChecked():
        #     rlayer = self.iface.addRasterLayer(self.dlg.showNameFile.text(), ly_name)

        self.dlg.progressBar.setValue(20)
        outdata2 = self.dlg.showNameFile.text()+"/polygonize.geojson"
        print(outdata)
        processing.run("gdal:polygonize",\
            {'INPUT':outdata,\
            'BAND':1,\
            'FIELD':'DN',\
            'EIGHT_CONNECTEDNESS':False,\
            'EXTRA':'',\
            'OUTPUT':outdata2})

        # outfix = self.dlg.showNameFile.text()
        outfix = self.dlg.showNameFile.text()+"/fixgeometry.geojson"
        processing.run("native:fixgeometries", {'INPUT':outdata2,'OUTPUT':outfix})

        self.dlg.progressBar.setValue(35)
        out_intersect = self.dlg.showNameFile.text()+"/intersect.geojson"
        processing.run("native:extractbylocation", {'INPUT':outfix,'PREDICATE':[0],'INTERSECT':self.dlg.train.currentLayer(),'OUTPUT':out_intersect})

        outclass = self.dlg.showNameFile.text()+"/area.geojson"
        outflood = self.dlg.showNameFile.text()+"/flooding.geojson"

        layer = QgsVectorLayer(out_intersect,'','ogr')
        z = []
        fn = layer.featureCount()

        for i in range (0,fn):
            feat = layer.getFeature(i)
            z.append(feat['DN'])
            print(feat['DN'])
        print(z)

        #DN is Water Body
        from collections import Counter


        self.dlg.progressBar.setValue(50)
        watwer = self.waterDN(z)
        print(watwer)
        if watwer != False:
            print("Class :", watwer)
            processing.run("native:extractbyexpression", {'INPUT':outfix,'EXPRESSION':'\"DN\" = '+str(watwer),'OUTPUT':outclass})
            print(self.dlg.dif.currentLayer())
            processing.run("native:difference", {'INPUT':outclass,'OVERLAY':self.dlg.dif.currentLayer(),'OUTPUT':outflood})

            # Check EPSG
            self.dlg.progressBar.setValue(80)
            layer = QgsVectorLayer(outflood, "", "ogr")
            if layer.crs().postgisSrid() != 4326:
                outflood_4326 = self.dlg.showNameFile.text()+"/flooding_4326.geojson"
                exp_crs = QgsCoordinateReferenceSystem(4326, QgsCoordinateReferenceSystem.EpsgCrsId)
                writer = QgsVectorFileWriter.writeAsVectorFormat(layer, outflood_4326,'UTF-8', exp_crs, 'GeoJson', False)
                outflood = outflood_4326

            if self.dlg.groupBox.isChecked():

                with open(outflood) as f:
                    data = json.load(f)
                for i in data['features']:
                    i['properties'].update({'date':self.dlg.date.text()})

                # print(data)
                

                # import to vallaris
                api_key = self.dlg.api_key.text()
                collection_id = self.dlg.collection_id.text()
                # items = {"type": "FeatureCollection","features": [data['features']]}
                # print(create_items(api_key,collection_id,items))
                st = 0
                end = 50

                for i in range((len(data['features'])//50)+1):
                    items = {"type": "FeatureCollection","features": []}
                    try:
                        items["features"] = data['features'][st:end]                          
                        status = create_items(api_key,collection_id,items) 

                        st += 50
                        end += 50       
                    except Exception as e:
                        # print("ERROR",e)
                        break
            self.dlg.progressBar.setValue(100)
        
         
        else:
            print("< 75% Error")

    def waterDN(self,class_list):
        count_class = Counter(class_list)
        output75per = ""
        for class_w in count_class:
            # print("key ",i,"=",a[i])
            print("class ",class_w,"count = ",count_class[class_w] ,"percent = ",(count_class[class_w]*100)/len(class_list)," %")

            if (count_class[class_w]*100)/len(class_list) > 75:
                output75per = class_w
        print(
            'test percent',output75per)
        if output75per != "":
            return str(output75per)
        else:
            return False